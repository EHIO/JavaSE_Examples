封装变化
多用组合， 少用继承
针对接口编程， 不针对实现编程
为交互对象之间的松耦合设计而努力
依赖抽象， 不要依赖具体类
对拓展开放， 对修改关闭


策略：定义了算法族， 分别封装起来，让它们之间可以相互替换， 此模式让算法的变化独立于使用算法的客户
观察者：在对象之间定义一对多的依赖， 这样一来， 当一个对象改变状态， 依赖它的对象都会收到通知，并自动更新。
装饰者：动态地将责任附加到对象上。想要扩展功能， 装饰者提供有别于继承的另一种选择
工厂方法：定义了一个创建对象的接口， 但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类
抽象工厂：提供一个接口， 用于创建相关或依赖对象的家族， 而不需要明确指定具体类
命令模式：将"请求"封装成对象， 以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作


